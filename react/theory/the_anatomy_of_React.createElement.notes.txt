React.createElement(/* type */, /* prop */, /* content */) 

Breakdown:
type -> either a string or a React Component
	this can be a string of any existing html element ('e.g. 'p','span','header') or you could pass 
	a React Component (jsx). 

props -> either null or an object 
	This is an object of HTML attributes and custom data about the element. 

content -> null, a string, a React Element, or a React Component 
	Anything that you pass here will be the content of the rendered element. This can include plain text, 
	javascript code, other React elements, etc. 

const element = React.createElement('div', null, "some string") 

or

const element = React.createElement('div', null, 
	React.createElement('span', null, 'hello')
)

// Create a list of people
const element = React.createElement('ol', null, 
	React.createElement('li', null, 'King Sanchez'),
	React.createElement('li', null, 'King Spivey'),
	React.createElement('li', null, 'King Steed'),
	React.createElement('li', null, 'King Solomon')
)

// array of elements 

const people = [
	{ name: 'osepeka' }, 
	{ name: 'danudae' }, 
	{ name: 'pursuun' } 
}

const element = React.createElement('ol', null, 
	people.map((person) => ( 
		React.createElement('li', { key: person.name}, person.name)
	))
)


HTML 
<header>
  <h1>React</h1>
</header>

JS
'h1'
'React'

JSX
<h1>
  React
</h1>


Re-create the list of people using JSX instead of the React.createElement class method

const element = <ol>
  <li>{people[0].name}</li>
</ol>

or 

const element = <ol>
  {people.map((person)) => (
    <li key={person.name}>{person.name}</li>
  ))}
</ol>

Components
class ContactList extends React.Component { 
  render() {
    return <ol>
      {people.map((person)) => (
        <li key={person.name}>{person.name}</li>
      ))}
  }
</ol>
}

ReactDOM.render(
  <ContactList />,
  document.getElementById('root')
)
